{"ast":null,"code":"var _jsxFileName = \"/Users/pateh1/Desktop/ReactApps/callback-memo-optimization/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport DemoOutput from './components/Demo/DemoOutput';\nimport Button from './components/UI/Button/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showParagraph, setShowParagraph] = useState(false);\n  console.log(\"App Running!!!\");\n\n  const toggleParagraphHandler = () => {\n    setShowParagraph(prevShowParagraph => !prevShowParagraph);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hi there!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DemoOutput, {\n      show: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: toggleParagraphHandler,\n      children: \" Toggle Paragraph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"eoYUlDKWxWYgikVZpaPr2UN2QyM=\");\n\n_c = App;\nexport default App;\n/*  \nIf we hardcode the show prop as false/true, \nthen DemoOutput wont be re-rendered on the dom as there is no state/prop/context change.\nBut when we click on Toggle Paragraph button, the DemoOutput component will be re-evaluated and re-executed\nbecause of App component gets re-evalauted as state got changed. And if DemoOutput has child Components then\nthey will also be re-evaluated unnecessary even if they wont make any change to the dom.\nSo, to optimize this re-evaluation, we need to use React.memo()\n Now, React.memo() will compare the new and the previous props value and check if they are same or not.\nIf same then it wont re-evaluate the function/component.\n But, in javascript method or arrays or objects can't be same. for eg: obj1 = {}, obj2 = {}. obj1 === obj2 => false\nSo, everytime if we reference a method or object or array in props, on re-evaluation it consider as new prop value.\nBecause of this, as we have wrapped Button component in React.memo(), it will get re-evaluated.\n To stop this re-evaluation for references as well, we need to use useCallback hook and wrap our function/reference.\nuseCallback will store that wrapped function in react store and will re-use the same whenever needed. \n */\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/pateh1/Desktop/ReactApps/callback-memo-optimization/src/App.js"],"names":["React","useState","DemoOutput","Button","App","showParagraph","setShowParagraph","console","log","toggleParagraphHandler","prevShowParagraph"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAC,KAAD,CAAlD;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;;AACA,QAAMC,sBAAsB,GAAG,MAAM;AACnCH,IAAAA,gBAAgB,CAACI,iBAAiB,IAAI,CAACA,iBAAvB,CAAhB;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAE;AAAlB;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAED,sBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAdQL,G;;KAAAA,G;AAgBT,eAAeA,GAAf;AAIE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from 'react';\n\nimport './App.css';\nimport DemoOutput from './components/Demo/DemoOutput';\nimport Button from './components/UI/Button/Button';\n\nfunction App() {\n  const [showParagraph, setShowParagraph] = useState(false);\n  console.log(\"App Running!!!\");\n  const toggleParagraphHandler = () => {\n    setShowParagraph(prevShowParagraph => !prevShowParagraph);\n  }\n\n  return (\n    <div className=\"app\">\n      <h1>Hi there!</h1>\n      <DemoOutput show={false}/> \n      <Button onClick={toggleParagraphHandler}> Toggle Paragraph</Button>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n  /*  \n  If we hardcode the show prop as false/true, \n  then DemoOutput wont be re-rendered on the dom as there is no state/prop/context change.\n  But when we click on Toggle Paragraph button, the DemoOutput component will be re-evaluated and re-executed\n  because of App component gets re-evalauted as state got changed. And if DemoOutput has child Components then\n  they will also be re-evaluated unnecessary even if they wont make any change to the dom.\n  So, to optimize this re-evaluation, we need to use React.memo()\n\n  Now, React.memo() will compare the new and the previous props value and check if they are same or not.\n  If same then it wont re-evaluate the function/component.\n\n  But, in javascript method or arrays or objects can't be same. for eg: obj1 = {}, obj2 = {}. obj1 === obj2 => false\n  So, everytime if we reference a method or object or array in props, on re-evaluation it consider as new prop value.\n  Because of this, as we have wrapped Button component in React.memo(), it will get re-evaluated.\n\n  To stop this re-evaluation for references as well, we need to use useCallback hook and wrap our function/reference.\n  useCallback will store that wrapped function in react store and will re-use the same whenever needed. \n\n  */ "]},"metadata":{},"sourceType":"module"}