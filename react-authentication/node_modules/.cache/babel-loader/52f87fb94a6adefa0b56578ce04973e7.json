{"ast":null,"code":"var _jsxFileName = \"/Users/pateh1/Desktop/ReactApps/react-authentication/src/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet logoutTimer;\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\nconst calculateRemainingTime = expirationTime => {\n  const currentTime = new Date().getTime();\n  const adjExpirationTime = new Date(expirationTime).getTime();\n  const remainingDuration = adjExpirationTime - currentTime;\n  return remainingDuration;\n};\n\nconst retrieveStoresToken = () => {};\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [token, setToken] = useState(initialToken);\n  const history = useHistory();\n  const userIsLoggedIn = !!token;\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n\n    history.replace('/');\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n    const remainingTime = calculateRemainingTime(expirationTime);\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"YBJf0QVwIi2PPPspF1aL2gOmvU4=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/pateh1/Desktop/ReactApps/react-authentication/src/store/auth-context.js"],"names":["React","useState","useHistory","logoutTimer","AuthContext","createContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","currentTime","Date","getTime","adjExpirationTime","remainingDuration","retrieveStoresToken","AuthContextProvider","props","setToken","initialToken","history","userIsLoggedIn","logoutHandler","localStorage","removeItem","clearTimeout","replace","loginHandler","setItem","remainingTime","setTimeout","contextValue","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,IAAIC,WAAJ;AAEA,MAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAN,CAAoB;AACtCC,EAAAA,KAAK,EAAE,EAD+B;AAEtCC,EAAAA,UAAU,EAAE,KAF0B;AAGtCC,EAAAA,KAAK,EAAGF,KAAD,IAAW,CAAE,CAHkB;AAItCG,EAAAA,MAAM,EAAE,MAAM,CAAE;AAJsB,CAApB,CAApB;;AAOA,MAAMC,sBAAsB,GAAIC,cAAD,IAAoB;AACjD,QAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAApB;AACA,QAAMC,iBAAiB,GAAG,IAAIF,IAAJ,CAASF,cAAT,EAAyBG,OAAzB,EAA1B;AAEA,QAAME,iBAAiB,GAAGD,iBAAiB,GAAGH,WAA9C;AACA,SAAOI,iBAAP;AACD,CAND;;AAQA,MAAMC,mBAAmB,GAAG,MAAM,CAEjC,CAFD;;AAIA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAE5C,QAAM,CAACb,KAAD,EAAQc,QAAR,IAAoBnB,QAAQ,CAACoB,YAAD,CAAlC;AACA,QAAMC,OAAO,GAAGpB,UAAU,EAA1B;AACA,QAAMqB,cAAc,GAAG,CAAC,CAACjB,KAAzB;;AAEA,QAAMkB,aAAa,GAAG,MAAM;AAC1BJ,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAK,IAAAA,YAAY,CAACC,UAAb,CAAwB,OAAxB;;AAEA,QAAIvB,WAAJ,EAAiB;AACbwB,MAAAA,YAAY,CAACxB,WAAD,CAAZ;AACH;;AACDmB,IAAAA,OAAO,CAACM,OAAR,CAAgB,GAAhB;AACD,GARD;;AAUA,QAAMC,YAAY,GAAG,CAACvB,KAAD,EAAQK,cAAR,KAA2B;AAC9CS,IAAAA,QAAQ,CAACd,KAAD,CAAR;AACAmB,IAAAA,YAAY,CAACK,OAAb,CAAqB,OAArB,EAA8BxB,KAA9B;AACA,UAAMyB,aAAa,GAAGrB,sBAAsB,CAACC,cAAD,CAA5C;AACAR,IAAAA,WAAW,GAAG6B,UAAU,CAACR,aAAD,EAAgBO,aAAhB,CAAxB;AACD,GALD;;AAOA,QAAME,YAAY,GAAG;AACnB3B,IAAAA,KAAK,EAAEA,KADY;AAEnBC,IAAAA,UAAU,EAAEgB,cAFO;AAGnBf,IAAAA,KAAK,EAAEqB,YAHY;AAInBpB,IAAAA,MAAM,EAAEe;AAJW,GAArB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAES,YAA7B;AAAA,cACGd,KAAK,CAACe;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAnCM;;GAAMhB,mB;UAGKhB,U;;;KAHLgB,mB;AAqCb,eAAed,WAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nlet logoutTimer;\n\nconst AuthContext = React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: (token) => {},\n  logout: () => {},\n});\n\nconst calculateRemainingTime = (expirationTime) => {\n  const currentTime = new Date().getTime();\n  const adjExpirationTime = new Date(expirationTime).getTime();\n\n  const remainingDuration = adjExpirationTime - currentTime;\n  return remainingDuration;\n};\n\nconst retrieveStoresToken = () => {\n\n}\n\nexport const AuthContextProvider = (props) => {\n  \n  const [token, setToken] = useState(initialToken);\n  const history = useHistory();\n  const userIsLoggedIn = !!token;\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n\n    if (logoutTimer) {\n        clearTimeout(logoutTimer);\n    }\n    history.replace('/');\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n    const remainingTime = calculateRemainingTime(expirationTime);\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"]},"metadata":{},"sourceType":"module"}