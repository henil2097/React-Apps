{"ast":null,"code":"var _jsxFileName = \"/Users/pateh1/Desktop/ReactApps/react-custom-hooks/src/components/ForwardCounter.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport useCounter from '../hooks/useCounter';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ForwardCounter = () => {\n  _s();\n\n  const counter = useCounter();\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: counter\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 10\n  }, this);\n};\n\n_s(ForwardCounter, \"j+ZYu4ctrMK8jvtEOZm738T2eDI=\", false, function () {\n  return [useCounter];\n});\n\n_c = ForwardCounter;\nexport default ForwardCounter;\n/* Move the following logic to useCounter custom hook(just another function)\nconst [counter, setCounter] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCounter((prevCounter) => prevCounter + 1);\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"ForwardCounter\");","map":{"version":3,"sources":["/Users/pateh1/Desktop/ReactApps/react-custom-hooks/src/components/ForwardCounter.js"],"names":["useState","useEffect","useCounter","Card","ForwardCounter","counter"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAMC,OAAO,GAAGH,UAAU,EAA1B;AAEA,sBAAO,QAAC,IAAD;AAAA,cAAOG;AAAP;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAJD;;GAAMD,c;UACYF,U;;;KADZE,c;AAMN,eAAeA,cAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { useState, useEffect } from 'react';\nimport useCounter from '../hooks/useCounter';\n\nimport Card from './Card';\n\nconst ForwardCounter = () => {\n  const counter = useCounter();\n  \n  return <Card>{counter}</Card>;\n};\n\nexport default ForwardCounter;\n\n/* Move the following logic to useCounter custom hook(just another function)\nconst [counter, setCounter] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCounter((prevCounter) => prevCounter + 1);\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n*/"]},"metadata":{},"sourceType":"module"}