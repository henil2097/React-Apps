{"ast":null,"code":"var _jsxFileName = \"/Users/pateh1/Desktop/ReactApps/effects-reducers-context/src/App.js\";\nimport React from \"react\";\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./store/auth-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  // context Provider and Consumer can be used to pass down the context to all the required child components\n  // and it doesn't requires to pass the required context/state through props.\n  // for eg: isLoggedIn state variable can be removed from props now and instead use context wherever required\n  return (\n    /*#__PURE__*/\n    // <AuthContext.Provider\n    //   value={{ isLoggedIn: isLoggedIn, onLogout: logoutHandler }}\n    // >\n    _jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n          onLogin: loginHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 25\n        }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {\n          onLogout: logoutHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }, this) // </AuthContext.Provider>\n\n  );\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/pateh1/Desktop/ReactApps/effects-reducers-context/src/App.js"],"names":["React","Login","Home","MainHeader","AuthContext","App","isLoggedIn","loginHandler","logoutHandler"],"mappings":";AAAA,OAAOA,KAAP,MAAwB,OAAxB;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;;;AAEA,SAASC,GAAT,GAAe;AACb;AACA;AACA;AACA;AAAA;AACE;AACA;AACA;AACA,YAAC,KAAD,CAAO,QAAP;AAAA,8BACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,mBACG,CAACC,UAAD,iBAAe,QAAC,KAAD;AAAO,UAAA,OAAO,EAAEC;AAAhB;AAAA;AAAA;AAAA;AAAA,gBADlB,EAEGD,UAAU,iBAAI,QAAC,IAAD;AAAM,UAAA,QAAQ,EAAEE;AAAhB;AAAA;AAAA;AAAA;AAAA,gBAFjB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,CAWE;;AAXF;AAaD;;KAjBQH,G;AAmBT,eAAeA,GAAf","sourcesContent":["import React, {  } from \"react\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./store/auth-context\";\n\nfunction App() {\n  // context Provider and Consumer can be used to pass down the context to all the required child components\n  // and it doesn't requires to pass the required context/state through props.\n  // for eg: isLoggedIn state variable can be removed from props now and instead use context wherever required\n  return (\n    // <AuthContext.Provider\n    //   value={{ isLoggedIn: isLoggedIn, onLogout: logoutHandler }}\n    // >\n    <React.Fragment>\n      <MainHeader />\n      <main>\n        {!isLoggedIn && <Login onLogin={loginHandler} />}\n        {isLoggedIn && <Home onLogout={logoutHandler} />}\n      </main>\n      </React.Fragment>\n    // </AuthContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}