{"ast":null,"code":"var _jsxFileName = \"/Users/pateh1/Desktop/ReactApps/react-authentication/src/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet logoutTimer;\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\nconst calculateRemainingTime = expirationTime => {\n  const currentTime = new Date().getTime();\n  const adjExpirationTime = new Date(expirationTime).getTime();\n  const remainingDuration = adjExpirationTime - currentTime;\n  return remainingDuration;\n};\n\nconst retrieveStoresToken = () => {\n  const initialToken = localStorage.getItem(\"token\");\n  const storedExpirationTime = localStorage.getItem('expirationTime');\n  const remainingTime = calculateRemainingTime(storedExpirationTime);\n\n  if (remainingTime <= 0) {}\n};\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [token, setToken] = useState(initialToken);\n  const history = useHistory();\n  const userIsLoggedIn = !!token;\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n\n    history.replace('/');\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem('expirationTime', expirationTime);\n    const remainingTime = calculateRemainingTime(expirationTime);\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"YBJf0QVwIi2PPPspF1aL2gOmvU4=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/pateh1/Desktop/ReactApps/react-authentication/src/store/auth-context.js"],"names":["React","useState","useHistory","logoutTimer","AuthContext","createContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","currentTime","Date","getTime","adjExpirationTime","remainingDuration","retrieveStoresToken","initialToken","localStorage","getItem","storedExpirationTime","remainingTime","AuthContextProvider","props","setToken","history","userIsLoggedIn","logoutHandler","removeItem","clearTimeout","replace","loginHandler","setItem","setTimeout","contextValue","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,IAAIC,WAAJ;AAEA,MAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAN,CAAoB;AACtCC,EAAAA,KAAK,EAAE,EAD+B;AAEtCC,EAAAA,UAAU,EAAE,KAF0B;AAGtCC,EAAAA,KAAK,EAAGF,KAAD,IAAW,CAAE,CAHkB;AAItCG,EAAAA,MAAM,EAAE,MAAM,CAAE;AAJsB,CAApB,CAApB;;AAOA,MAAMC,sBAAsB,GAAIC,cAAD,IAAoB;AACjD,QAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAApB;AACA,QAAMC,iBAAiB,GAAG,IAAIF,IAAJ,CAASF,cAAT,EAAyBG,OAAzB,EAA1B;AAEA,QAAME,iBAAiB,GAAGD,iBAAiB,GAAGH,WAA9C;AACA,SAAOI,iBAAP;AACD,CAND;;AAQA,MAAMC,mBAAmB,GAAG,MAAM;AAC9B,QAAMC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAArB;AACA,QAAMC,oBAAoB,GAAGF,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAA7B;AAEA,QAAME,aAAa,GAAGZ,sBAAsB,CAACW,oBAAD,CAA5C;;AAEA,MAAIC,aAAa,IAAI,CAArB,EAAwB,CAEvB;AACJ,CATD;;AAWA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAE5C,QAAM,CAAClB,KAAD,EAAQmB,QAAR,IAAoBxB,QAAQ,CAACiB,YAAD,CAAlC;AACA,QAAMQ,OAAO,GAAGxB,UAAU,EAA1B;AACA,QAAMyB,cAAc,GAAG,CAAC,CAACrB,KAAzB;;AAEA,QAAMsB,aAAa,GAAG,MAAM;AAC1BH,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAN,IAAAA,YAAY,CAACU,UAAb,CAAwB,OAAxB;;AAEA,QAAI1B,WAAJ,EAAiB;AACb2B,MAAAA,YAAY,CAAC3B,WAAD,CAAZ;AACH;;AACDuB,IAAAA,OAAO,CAACK,OAAR,CAAgB,GAAhB;AACD,GARD;;AAUA,QAAMC,YAAY,GAAG,CAAC1B,KAAD,EAAQK,cAAR,KAA2B;AAC9Cc,IAAAA,QAAQ,CAACnB,KAAD,CAAR;AACAa,IAAAA,YAAY,CAACc,OAAb,CAAqB,OAArB,EAA8B3B,KAA9B;AACAa,IAAAA,YAAY,CAACc,OAAb,CAAqB,gBAArB,EAAuCtB,cAAvC;AACA,UAAMW,aAAa,GAAGZ,sBAAsB,CAACC,cAAD,CAA5C;AACAR,IAAAA,WAAW,GAAG+B,UAAU,CAACN,aAAD,EAAgBN,aAAhB,CAAxB;AACD,GAND;;AAQA,QAAMa,YAAY,GAAG;AACnB7B,IAAAA,KAAK,EAAEA,KADY;AAEnBC,IAAAA,UAAU,EAAEoB,cAFO;AAGnBnB,IAAAA,KAAK,EAAEwB,YAHY;AAInBvB,IAAAA,MAAM,EAAEmB;AAJW,GAArB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEO,YAA7B;AAAA,cACGX,KAAK,CAACY;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CApCM;;GAAMb,mB;UAGKrB,U;;;KAHLqB,mB;AAsCb,eAAenB,WAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nlet logoutTimer;\n\nconst AuthContext = React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: (token) => {},\n  logout: () => {},\n});\n\nconst calculateRemainingTime = (expirationTime) => {\n  const currentTime = new Date().getTime();\n  const adjExpirationTime = new Date(expirationTime).getTime();\n\n  const remainingDuration = adjExpirationTime - currentTime;\n  return remainingDuration;\n};\n\nconst retrieveStoresToken = () => {\n    const initialToken = localStorage.getItem(\"token\");\n    const storedExpirationTime = localStorage.getItem('expirationTime');\n\n    const remainingTime = calculateRemainingTime(storedExpirationTime);\n\n    if (remainingTime <= 0) {\n\n    }\n}\n\nexport const AuthContextProvider = (props) => {\n  \n  const [token, setToken] = useState(initialToken);\n  const history = useHistory();\n  const userIsLoggedIn = !!token;\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n\n    if (logoutTimer) {\n        clearTimeout(logoutTimer);\n    }\n    history.replace('/');\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem('expirationTime', expirationTime);\n    const remainingTime = calculateRemainingTime(expirationTime);\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"]},"metadata":{},"sourceType":"module"}