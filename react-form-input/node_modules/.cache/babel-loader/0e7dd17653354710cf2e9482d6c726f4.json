{"ast":null,"code":"var _jsxFileName = \"/Users/pateh1/Desktop/ReactApps/react-form-input/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  // const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [formIsValid, setFormIsValid] = useState(false);\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched; // let formIsValid = false;\n  // if(enteredNameIsValid) {\n  //   formIsValid = true;\n  // }\n\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      setFormIsValid(true);\n      console.log(formIsValid);\n    } else {\n      setFormIsValid(false);\n      console.log(formIsValid);\n    }\n  }, [enteredNameIsValid]);\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    console.log(enteredName); // const enteredValue = nameInputRef.current.value;\n    // console.log(enteredValue);\n    // nameInputRef.current.value = '';  // NOT IDEAL, DON'T MANIPULATE THE DOM DIRECTLY. LET REACT TO HANDLE THE DOM BY USING STATE\n\n    setEnteredName('');\n    setEnteredNameTouched(false);\n  };\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n    console.log(enteredName);\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n    console.log(enteredNameTouched);\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        // ref={nameInputRef}\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"5vT777S/ZiJ1o4AjyUtAp2KcXt0=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/pateh1/Desktop/ReactApps/react-form-input/src/components/SimpleInput.js"],"names":["useEffect","useRef","useState","SimpleInput","props","enteredName","setEnteredName","enteredNameTouched","setEnteredNameTouched","formIsValid","setFormIsValid","enteredNameIsValid","trim","nameInputIsInvalid","console","log","formSubmissionHandler","event","preventDefault","nameInputChangeHandler","target","value","nameInputBlurHandler","nameInputClasses"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACK,kBAAD,EAAqBC,qBAArB,IAA8CN,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMS,kBAAkB,GAAGN,WAAW,CAACO,IAAZ,OAAuB,EAAlD;AACA,QAAMC,kBAAkB,GAAG,CAACF,kBAAD,IAAuBJ,kBAAlD,CAP6B,CAS7B;AAEA;AACA;AACA;;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGW,kBAAH,EAAuB;AACrBD,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYN,WAAZ;AACD,KAHD,MAIK;AACHC,MAAAA,cAAc,CAAC,KAAD,CAAd;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYN,WAAZ;AACD;AACF,GATQ,EASN,CAACE,kBAAD,CATM,CAAT;;AAWA,QAAMK,qBAAqB,GAAIC,KAAD,IAAW;AACvCA,IAAAA,KAAK,CAACC,cAAN;AACAV,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AACA,QAAI,CAACG,kBAAL,EAAyB;AACvB;AACD;;AACDG,IAAAA,OAAO,CAACC,GAAR,CAAYV,WAAZ,EANuC,CAQvC;AACA;AACA;;AACAC,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,IAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD,GAbD;;AAcA,QAAMW,sBAAsB,GAAIF,KAAD,IAAW;AACxCX,IAAAA,cAAc,CAACW,KAAK,CAACG,MAAN,CAAaC,KAAd,CAAd;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYV,WAAZ;AACD,GAHD;;AAKA,QAAMiB,oBAAoB,GAAIL,KAAD,IAAW;AACtCT,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYR,kBAAZ;AACD,GAHD;;AAMA,QAAMgB,gBAAgB,GAAGV,kBAAkB,GAAG,sBAAH,GAA4B,cAAvE;AACA,sBACE;AAAM,IAAA,QAAQ,EAAEG,qBAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEO,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE;AACA,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,EAAE,EAAC,MAHL;AAIE,QAAA,QAAQ,EAAEJ,sBAJZ;AAKE,QAAA,MAAM,EAAEG,oBALV;AAME,QAAA,KAAK,EAAEjB;AANT;AAAA;AAAA;AAAA;AAAA,cAFF,EAUGQ,kBAAkB,iBAAI;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVzB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAaE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAQ,QAAA,QAAQ,EAAE,CAACJ,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAvED;;GAAMN,W;;KAAAA,W;AAyEN,eAAeA,WAAf","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\n\nconst SimpleInput = (props) => {\n  // const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  // let formIsValid = false;\n\n  // if(enteredNameIsValid) {\n  //   formIsValid = true;\n  // }\n\n  useEffect(() => {\n    if(enteredNameIsValid) {\n      setFormIsValid(true);\n      console.log(formIsValid);\n    }\n    else {\n      setFormIsValid(false);\n      console.log(formIsValid);\n    }\n  }, [enteredNameIsValid])\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    if (!enteredNameIsValid) {\n      return;\n    }\n    console.log(enteredName);\n    \n    // const enteredValue = nameInputRef.current.value;\n    // console.log(enteredValue);\n    // nameInputRef.current.value = '';  // NOT IDEAL, DON'T MANIPULATE THE DOM DIRECTLY. LET REACT TO HANDLE THE DOM BY USING STATE\n    setEnteredName('');\n    setEnteredNameTouched(false);\n  };\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value);\n    console.log(enteredName);\n  };\n\n  const nameInputBlurHandler = (event) => {\n    setEnteredNameTouched(true);\n    console.log(enteredNameTouched);\n  }\n\n  \n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control'\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          // ref={nameInputRef}\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && <p className=\"error-text\">Name must not be empty</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}