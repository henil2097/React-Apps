{"ast":null,"code":"var _jsxFileName = \"/Users/pateh1/Desktop/ReactApps/react-authentication/src/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet logoutTimer;\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: (token, expirationTime) => {},\n  logout: () => {}\n});\n\nconst calculateRemainingTime = expirationTime => {\n  const currentTime = new Date().getTime();\n  const adjExpirationTime = new Date(expirationTime).getTime();\n  const remainingDuration = adjExpirationTime - currentTime;\n  return remainingDuration;\n};\n\nconst retrieveStoresToken = () => {\n  const storedToken = localStorage.getItem(\"token\");\n  const storedExpirationTime = localStorage.getItem('expirationTime');\n  const remainingTime = calculateRemainingTime(storedExpirationTime);\n\n  if (remainingTime <= 60000) {\n    // 1 minute\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationTime');\n    return null;\n  }\n\n  return {\n    token: storedToken,\n    duration: remainingTime\n  };\n};\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  const tokenData = retrieveStoresToken();\n  let initialToken;\n\n  if (tokenData) {\n    initialToken = tokenData.token;\n  }\n\n  const [token, setToken] = useState(initialToken);\n  const history = useHistory();\n  const userIsLoggedIn = !!token;\n  const logoutHandler = useCallback(() => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem('expirationTime');\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n\n    history.replace('/');\n  });\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem('expirationTime', expirationTime);\n    const remainingTime = calculateRemainingTime(expirationTime);\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\n  };\n\n  useEffect(() => {\n    if (tokenData) {\n      console.log(tokenData.duration);\n      logoutTimer = setTimeout(logoutHandler, tokenData.duration);\n    }\n  }, [tokenData, logoutHandler]);\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"djOSx8Ajp19B7RHbCmXRjV+ix20=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/pateh1/Desktop/ReactApps/react-authentication/src/store/auth-context.js"],"names":["React","useState","useEffect","useHistory","logoutTimer","AuthContext","createContext","token","isLoggedIn","login","expirationTime","logout","calculateRemainingTime","currentTime","Date","getTime","adjExpirationTime","remainingDuration","retrieveStoresToken","storedToken","localStorage","getItem","storedExpirationTime","remainingTime","removeItem","duration","AuthContextProvider","props","tokenData","initialToken","setToken","history","userIsLoggedIn","logoutHandler","useCallback","clearTimeout","replace","loginHandler","setItem","setTimeout","console","log","contextValue","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nlet logoutTimer;\n\nconst AuthContext = React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: (token, expirationTime) => {},\n  logout: () => {},\n});\n\nconst calculateRemainingTime = (expirationTime) => {\n  const currentTime = new Date().getTime();\n  const adjExpirationTime = new Date(expirationTime).getTime();\n\n  const remainingDuration = adjExpirationTime - currentTime;\n  return remainingDuration;\n};\n\nconst retrieveStoresToken = () => {\n    const storedToken = localStorage.getItem(\"token\");\n    const storedExpirationTime = localStorage.getItem('expirationTime');\n\n    const remainingTime = calculateRemainingTime(storedExpirationTime);\n\n    if (remainingTime <= 60000) { // 1 minute\n        localStorage.removeItem('token');\n        localStorage.removeItem('expirationTime');\n        return null;\n    }\n\n    return {\n        token: storedToken,\n        duration: remainingTime\n    }\n}\n\nexport const AuthContextProvider = (props) => {\n    const tokenData = retrieveStoresToken();\n    let initialToken;\n    if (tokenData) {\n        initialToken = tokenData.token;\n    }\n  \n  const [token, setToken] = useState(initialToken);\n  const history = useHistory();\n  const userIsLoggedIn = !!token;\n\n  const logoutHandler = useCallback(() => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem('expirationTime');\n\n    if (logoutTimer) {\n        clearTimeout(logoutTimer);\n    }\n    history.replace('/');\n  });\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem('expirationTime', expirationTime);\n    const remainingTime = calculateRemainingTime(expirationTime);\n    logoutTimer = setTimeout(logoutHandler, remainingTime);\n  };\n\n  useEffect(() => {\n      if (tokenData) {\n          console.log(tokenData.duration);\n          logoutTimer = setTimeout(logoutHandler, tokenData.duration);\n      }\n  }, [tokenData, logoutHandler]);\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"]},"metadata":{},"sourceType":"module"}