{"ast":null,"code":"import { useReducer } from \"react\";\nconst initialInputState = {\n  value: '',\n  isTouched: false\n};\n\nconst useInput = validateValue => {\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = event => {\n    setEnteredValue(event.target.value);\n  };\n\n  const valueBlurHandler = event => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    setEnteredValue('');\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    valueBlurHandler,\n    reset\n  };\n};\n\nexport default useInput;","map":{"version":3,"sources":["/Users/pateh1/Desktop/ReactApps/react-form-input/src/hooks/useInput.js"],"names":["useReducer","initialInputState","value","isTouched","useInput","validateValue","valueIsValid","enteredValue","hasError","valueChangeHandler","event","setEnteredValue","target","valueBlurHandler","setIsTouched","reset","isValid"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,MAAMC,iBAAiB,GAAG;AACtBC,EAAAA,KAAK,EAAE,EADe;AAEtBC,EAAAA,SAAS,EAAE;AAFW,CAA1B;;AAIA,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;AAEhC,QAAMC,YAAY,GAAGD,aAAa,CAACE,YAAD,CAAlC;AACA,QAAMC,QAAQ,GAAG,CAACF,YAAD,IAAiBH,SAAlC;;AAEA,QAAMM,kBAAkB,GAAIC,KAAD,IAAW;AAClCC,IAAAA,eAAe,CAACD,KAAK,CAACE,MAAN,CAAaV,KAAd,CAAf;AACH,GAFD;;AAIA,QAAMW,gBAAgB,GAAIH,KAAD,IAAW;AAChCI,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAFD;;AAIA,QAAMC,KAAK,GAAG,MAAM;AAChBJ,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAG,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHD;;AAIA,SAAO;AACHZ,IAAAA,KAAK,EAAEK,YADJ;AAEHS,IAAAA,OAAO,EAAEV,YAFN;AAGHE,IAAAA,QAHG;AAIHC,IAAAA,kBAJG;AAKHI,IAAAA,gBALG;AAMHE,IAAAA;AANG,GAAP;AASH,CA1BD;;AA4BA,eAAeX,QAAf","sourcesContent":["import { useReducer } from \"react\";\n\nconst initialInputState = {\n    value: '',\n    isTouched: false\n}\nconst useInput = (validateValue) => {\n    \n    const valueIsValid = validateValue(enteredValue);\n    const hasError = !valueIsValid && isTouched;\n\n    const valueChangeHandler = (event) => {\n        setEnteredValue(event.target.value);\n    };\n    \n    const valueBlurHandler = (event) => {\n        setIsTouched(true);\n    }\n\n    const reset = () => {\n        setEnteredValue('');\n        setIsTouched(false);\n    }\n    return {\n        value: enteredValue,\n        isValid: valueIsValid,\n        hasError,\n        valueChangeHandler,\n        valueBlurHandler,\n        reset\n    }\n\n}\n\nexport default useInput;"]},"metadata":{},"sourceType":"module"}